name: Checks

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-unity:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2019.4.39f1
          - 2020.3.35f1
          - 2021.3.4f1

    steps:
      - uses: actions/checkout@v3

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: ${{github.repository_owner}}

      - name: Parse major unity version
        id: major-unity-version
        uses: actions/github-script@v6
        env:
          UNITY_VERSION: ${{ matrix.unityVersion }}
        with:
          result-encoding: string
          script: return process.env['UNITY_VERSION'].substr(0, 4);

      - name: Cache
        uses: actions/cache@v3
        with:
          path: ResponsibleUnity/Library
          key: ${{ steps.major-unity-version.outputs.result }}-Library-${{ hashFiles('com.beatwaves.responsible/**', 'ResponsibleUnity/**', 'src/Responsible.Tests/**') }}
          restore-keys: |
            ${{ steps.major-unity-version.outputs.result }}-Library-

      - name: Write Unity license file
        run: echo "$UNITY_LICENSE" | tr -d '\r' > unity-license
        shell: bash
        env:
          UNITY_LICENSE : ${{ secrets.UNITY_LICENSE_2020 }}

      - name: Run tests
        uses: addnab/docker-run-action@v3
        with:
          image: unityci/editor:${{ matrix.unityVersion }}-linux-il2cpp-1
          options: -v ${{ github.workspace }}:/project
          run: /project/ResponsibleUnity/run-tests.sh

      - name: Fix test result ownership (and debug)
        run: |
          ls -l TestResults/*
          sudo chown -R runner:docker TestResults
          ls -l TestResults/*

      - name: Push to testspace
        if: ${{ always() }}
        run: testspace
          [Unity-${{ matrix.unityVersion }}]TestResults/test-results.xml

      - name: Push to codecov.io
        if: ${{ always() }}
        uses: codecov/codecov-action@v3
        with:
          flags: Unity${{ matrix.unityVersion }}
          files: TestResults/ResponsibleUnity-opencov/Automated/TestCoverageResults_0000.xml"
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: Unity Test Results ${{ matrix.unityVersion }}
          path: TestResults

  test-netstandard:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: src

    strategy:
          fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: ${{github.repository_owner}}

      - name: Run Tests
        id: run-tests
        run: |
          dotnet test --collect:"XPlat Code Coverage" -r TestResults --settings runsettings.xml --logger "trx"
          echo "::set-output name=tests::TestResults/*.trx"

      - name: Push to testspace
        if: ${{ always() }}
        run: testspace [.NET]${{ steps.run-tests.outputs.tests }}

      - name: Push to codecov.io
        uses: codecov/codecov-action@v3
        if: ${{ always() }}
        with:
          flags: netstandard
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: netstandard Test Results
          path: src/TestResults

  test-mutation-core:
    uses: ./.github/workflows/stryker.yml
    with:
      working-directory : src/Responsible.Tests
    secrets:
      STRYKER_KEY: ${{ secrets.STRYKER_KEY }}

  test-mutation-gherkin:
    uses: ./.github/workflows/stryker.yml
    with:
      working-directory: src/ResponsibleGherkin.Tests
    secrets:
      STRYKER_KEY: ${{ secrets.STRYKER_KEY }}

  inspectcode:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: src

    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v3

      - name: Setup dotnet
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '6.0.x'

      - name: dotnet restore
        run: |
          dotnet restore
          dotnet tool restore

      - name: Run ReSharper
        run: ./inspectcode.sh

      - name: Archive ReSharper run
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: ReSharper
          path: src/inspect.xml

      - name: ReSharper XML -> GitHub output
        if: ${{ always() }}
        uses: glassechidna/resharper-action@v1
        with:
          report: src/inspect.xml
