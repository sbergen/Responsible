name: CI

on:
  push:
    branches: [ main, DotNetStandard ]
  pull_request:

jobs:
  test-unity:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2019.4.14f1
          - 2020.3.1f1

        # No dots allowed in secret names, so we need to have this mapping
        include:
          - unityVersion: 2019.4.14f1
            licenseSecret: UNITY_LICENSE_2019
          - unityVersion: 2020.3.1f1
            licenseSecret: UNITY_LICENSE_2020

    steps:
      - uses: actions/checkout@v2

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: ${{github.repository_owner}}

      - name: Cache
        uses: actions/cache@v2.1.2
        with:
          path: ResponsibleUnity/Library
          key: Library-${{ matrix.unityVersion }}

      - name: Run tests
        id: tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets[matrix.licenseSecret] }}
        with:
          projectPath: ResponsibleUnity
          unityVersion: ${{ matrix.unityVersion }}
          # TaskExtensions is excluded from coverage, because Unity is having a hard time with some attributes.
          # It's covered in .NET standard, so shouldn't be a problem excluding it here...
          customParameters: -enableCodeCoverage
            -coverageResultsPath "../artifacts/CodeCoverage/"
            -coverageOptions assemblyFilters:+Responsible,+Responsible.Editor;pathFilters:-*TaskExtensions.cs*
            -nographics
            -disable-assembly-updater
      
      - name: Push to testspace
        if: ${{ always() }}
        run: testspace
          [${{ matrix.unityVersion }}]artifacts/editmode-results.xml
          [${{ matrix.unityVersion }}]artifacts/playmode-results.xml

      - name: Push to codecov.io
        if: ${{ always() }}
        uses: codecov/codecov-action@v1
        with:
          flags: Unity ${{ matrix.unityVersion }}
          files: |
            artifacts/CodeCoverage/ResponsibleUnity-opencov/EditMode/TestCoverageResults_0000.xml,
            artifacts/CodeCoverage/ResponsibleUnity-opencov/PlayMode/TestCoverageResults_0000.xml
          fail_ci_if_error: true

      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: Unity Test Results ${{ matrix.unityVersion }}
          path: artifacts

  test-netstandard:
    runs-on: ubuntu-latest

    strategy:
          fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: ${{github.repository_owner}}

      - name: Run Tests
        id: run-tests
        working-directory: Responsible
        run: |
          dotnet test --collect:"XPlat Code Coverage" -r TestResults --settings runsettings.xml --logger "trx;LogFileName=results.xml"
          echo "::set-output name=coverage::Responsible/$(ls TestResults/*/* | head -n1)"
          echo "::set-output name=tests::Responsible/TestResults/results.xml"

      - name: Push to testspace
        if: ${{ always() }}
        run: testspace ${{ steps.run-tests.outputs.tests }}

      - name: Push to codecov.io
        uses: codecov/codecov-action@v1
        if: ${{ always() }}
        with:
          flags: netstandard
          files: ${{ steps.run-tests.outputs.coverage }}
          fail_ci_if_error: true

      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: netstandard Test Results
          path: Responsible/TestResults

  pack-netstandard:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      
      - name: Build nupkg
        run: dotnet pack Responsible --output nupkg

      - name: Archive nupkg
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: nupkg
          path: nupkg/*

  check-markdown-links:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gaurav-nelson/github-action-markdown-link-check@v1

  inspectcode:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      
      - name: Cache Library
        uses: actions/cache@v2.1.2
        with:
          path: ResponsibleUnity/Library
          key: Library-resharper

      - name: Run ReSharper in Unity
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE_2019 }}
        with:
          projectPath: ResponsibleUnity
          customImage: thesbergen/unityci-resharper
          targetPlatform: StandaloneLinux64
          buildMethod: Responsible.EditorSetup.ContinuousIntegration.InspectCode
          customParameters: -disable-assembly-updater

      - name: Archive ReSharper run
        if: ${{ always() }}
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: ReSharper
          path: |
            resharper/inspect.xml
            resharper/stdout.txt
            resharper/stderr.txt

      - name: ReSharper XML -> GitHub output
        if: ${{ always() }}
        uses: glassechidna/resharper-action@v1
        with:
          report: resharper/inspect.xml

  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Library
        uses: actions/cache@v2.1.2
        with:
          path: ResponsibleUnity/Library
          key: Library-docfx

      - name: Generate docs
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE_2019 }}
        with:
          projectPath: ResponsibleUnity
          customImage: thesbergen/unityci-docfx
          targetPlatform: StandaloneLinux64
          buildMethod: Responsible.EditorSetup.ContinuousIntegration.BuildDocumentation
          customParameters: -disable-assembly-updater

      - name: Archive docs
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: Docs
          path: docfx/docs_site

      - name: Deploy docs
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages
          folder: docfx/docs_site/ResponsibleDocs
          dry-run: ${{ github.ref != 'refs/heads/main' }}

  version-info:
    runs-on: ubuntu-latest

    outputs:
      old-version: ${{ steps.parse-tag-version.outputs.version }}
      new-version: ${{ steps.package-version.outputs.prop }}
      changelog-body: ${{ steps.changelog.outputs.changes }}
      tag-name: ${{ steps.create-tag-name.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Get latest release info
        id: latest-release
        uses: thebritican/fetch-latest-release@v2.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN}}

      - name: Parse version from tag
        id: parse-tag-version
        run: |
          tag=$(echo ${{ steps.latest-release.outputs.tag_name }})
          echo "::set-output name=version::${tag:1}"

      - name: Read current package version
        id: package-version
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: com.beatwaves.responsible/package.json
          prop_path: 'version'

      - name: Get latest changelog entry
        id: changelog
        uses: mindsers/changelog-reader-action@v2

      - name: Output status
        run: |
          echo "Previous version from tags: ${{ steps.parse-tag-version.outputs.version }}"
          echo "Current version from package.json: ${{ steps.package-version.outputs.prop }}"
          echo "Current version from CHANGELOG.md: ${{ steps.changelog.outputs.version }}"

      - name: Check that changelog is up to date with package.json
        run: test ${{ steps.package-version.outputs.prop }} = ${{ steps.changelog.outputs.version }}

      - name: Create tag name
        id: create-tag-name
        run: echo "::set-output name=tag::v${{ steps.package-version.outputs.prop }}"

  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [ version-info, docs ]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.version-info.outputs.new-version != needs.version-info.outputs.old-version

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        name: Download Docs
        with:
          name: Docs
      
      - name: Zip files
        run: |
          pushd Packages && zip -r ../Responsible.zip Responsible && popd
          zip -r ResponsibleDocs.zip ResponsibleDocs

      - uses: softprops/action-gh-release@v1
        with:
          fail_on_unmatched_files: true
          body: ${{ needs.version-info.outputs.changelog-body }}
          tag_name: ${{ needs.version-info.outputs.tag-name }}
          files: |
            ResponsibleDocs.zip
            Responsible.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
