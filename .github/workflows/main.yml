name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  test-unity:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2019.4.14f1
          - 2020.3.1f1

        # No dots allowed in secret names, so we need to have this mapping
        include:
          - unityVersion: 2019.4.14f1
            licenseSecret: UNITY_LICENSE_2019
          - unityVersion: 2020.3.1f1
            licenseSecret: UNITY_LICENSE_2020

    steps:
      - uses: actions/checkout@v2

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: ${{github.repository_owner}}

      - name: Cache
        uses: actions/cache@v2.1.2
        with:
          path: ResponsibleUnity/Library
          key: Library-${{ matrix.unityVersion }}

      - name: Run tests
        id: tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets[matrix.licenseSecret] }}
        with:
          projectPath: ResponsibleUnity
          unityVersion: ${{ matrix.unityVersion }}
          # TaskExtensions is excluded from coverage, because Unity is having a hard time with some attributes.
          # It's covered in .NET standard, so shouldn't be a problem excluding it here...
          customParameters: -enableCodeCoverage
            -coverageResultsPath "../artifacts/CodeCoverage/"
            -coverageOptions assemblyFilters:+Responsible,+Responsible.Editor;pathFilters:-*TaskExtensions.cs*
            -debugCodeOptimization
            -nographics
            -disable-assembly-updater
      
      - name: Push to testspace
        if: ${{ always() }}
        run: testspace
          [${{ matrix.unityVersion }}]artifacts/editmode-results.xml
          [${{ matrix.unityVersion }}]artifacts/playmode-results.xml

      - name: Push to codecov.io
        if: ${{ always() }}
        uses: codecov/codecov-action@v1
        with:
          flags: Unity ${{ matrix.unityVersion }}
          files: |
            artifacts/CodeCoverage/ResponsibleUnity-opencov/EditMode/TestCoverageResults_0000.xml,
            artifacts/CodeCoverage/ResponsibleUnity-opencov/PlayMode/TestCoverageResults_0000.xml
          fail_ci_if_error: true

      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: Unity Test Results ${{ matrix.unityVersion }}
          path: artifacts

  test-netstandard:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: Responsible

    strategy:
          fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - uses: testspace-com/setup-testspace@v1
        with:
          domain: ${{github.repository_owner}}

      - name: Run Tests
        id: run-tests
        run: |
          dotnet test --collect:"XPlat Code Coverage" -r TestResults --settings runsettings.xml --logger "trx;LogFileName=results.xml"
          echo "::set-output name=coverage::Responsible/$(ls TestResults/*/* | head -n1)"
          echo "::set-output name=tests::TestResults/results.xml"

      - name: Push to testspace
        if: ${{ always() }}
        run: testspace ${{ steps.run-tests.outputs.tests }}

      - name: Push to codecov.io
        uses: codecov/codecov-action@v1
        if: ${{ always() }}
        with:
          flags: netstandard
          files: ${{ steps.run-tests.outputs.coverage }}
          fail_ci_if_error: true

      - name: Archive test results
        if: ${{ always() }}
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: netstandard Test Results
          path: Responsible/TestResults

  test-mutation:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: Responsible

    steps:
      - uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'

      - name: dotnet restore
        run: |
          dotnet restore
          dotnet tool restore

      - name: Set version to PR number
        if: ${{ github.ref != 'refs/heads/main' }}
        run: echo "STRYKER_VERSION=${{ github.event.number }}" >> $GITHUB_ENV

      - name: Set version to main
        if: ${{ github.ref == 'refs/heads/main' }}
        run: echo "STRYKER_VERSION=main" >> $GITHUB_ENV

      - name: Run Stryker Mutation Testings
        run: dotnet stryker --reporters "['dashboard']" --dashboard-api-key ${{ secrets.STRYKER_KEY }} --dashboard-project github.com/sbergen/Responsible --dashboard-version ${{ env.STRYKER_VERSION }}

  pack-netstandard:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'
      
      - name: Build nupkg
        run: dotnet pack Responsible --output nupkg

      - name: Archive nupkg
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: nupkg
          path: nupkg/*

  inspectcode:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
      - uses: actions/checkout@v2
      
      - name: Cache Library
        uses: actions/cache@v2.1.2
        with:
          path: ResponsibleUnity/Library
          key: Library-resharper

      - name: Run ReSharper in Unity
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE_2019 }}
        with:
          projectPath: ResponsibleUnity
          customImage: thesbergen/unityci-resharper
          targetPlatform: StandaloneLinux64
          buildMethod: Responsible.EditorSetup.ContinuousIntegration.InspectCode
          customParameters: -disable-assembly-updater

      - name: Archive ReSharper run
        if: ${{ always() }}
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: ReSharper
          path: |
            resharper/inspect.xml
            resharper/stdout.txt
            resharper/stderr.txt

      - name: ReSharper XML -> GitHub output
        if: ${{ always() }}
        uses: glassechidna/resharper-action@v1
        with:
          report: resharper/inspect.xml

  analyze:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: 'csharp'

    - name: Autobuild
      uses: github/codeql-action/autobuild@v1

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1

  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Cache Library
        uses: actions/cache@v2.1.2
        with:
          path: ResponsibleUnity/Library
          key: Library-docfx

      - name: Generate docs
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE_2019 }}
        with:
          projectPath: ResponsibleUnity
          customImage: thesbergen/unityci-docfx
          targetPlatform: StandaloneLinux64
          buildMethod: Responsible.EditorSetup.ContinuousIntegration.BuildDocumentation
          customParameters: -disable-assembly-updater

      - name: Archive docs
        uses: actions/upload-artifact@v2.2.0 
        with:
          name: Docs
          path: docfx/docs_site

      - name: Deploy docs
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages
          folder: docfx/docs_site/ResponsibleDocs
          dry-run: ${{ github.ref != 'refs/heads/main' }}

  version-info:
    runs-on: ubuntu-latest

    outputs:
      old-version: ${{ steps.latest-release-version.outputs.result }}
      new-version: ${{ steps.unity-version.outputs.prop }}
      changelog-body: ${{ steps.changelog.outputs.changes }}
      tag-name: ${{ steps.create-tag-name.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Get latest release version
        id: latest-release-version
        uses: actions/github-script@v3
        with:
          result-encoding: string
          script: |
            const [owner, repo] = process.env['GITHUB_REPOSITORY'].split('/', 2);
            const { data } = await github.repos.getLatestRelease({ owner, repo });
            return data.tag_name.substr(1);

      - name: Read current Unity package version
        id: unity-version
        uses: notiz-dev/github-action-json-property@release
        with: 
          path: com.beatwaves.responsible/package.json
          prop_path: 'version'

      - name: Read current NuGet package version
        id: nuget-version
        run: |
          version=$(sed -n 's:.*<Version>\(.*\)</Version>.*:\1:p' com.beatwaves.responsible/Runtime/Responsible.csproj)
          echo "::set-output name=version::${version}"

      - name: Get latest changelog entry
        id: changelog
        uses: mindsers/changelog-reader-action@v2

      - name: Output version status
        env:
          CHANGELOG: ${{ steps.changelog.outputs.changes }}
        run: |
          echo "Previous release version: ${{ steps.latest-release-version.outputs.result }}"
          echo "Current version from Unity package.json: ${{ steps.unity-version.outputs.prop }}"
          echo "Current version from NuGet package: ${{ steps.nuget-version.outputs.version }}"
          echo "Current version from CHANGELOG.md: ${{ steps.changelog.outputs.version }}"
          echo "Changes in changelog:"
          echo $CHANGELOG

      - name: Check that Unity version is up to date with changelog
        run: test ${{ steps.unity-version.outputs.prop }} = ${{ steps.changelog.outputs.version }}

      - name: Check that NuGet version is up to date with changelog
        run: test ${{ steps.nuget-version.outputs.version }} = ${{ steps.changelog.outputs.version }}

      - name: Create tag name
        id: create-tag-name
        run: echo "::set-output name=tag::v${{ steps.nuget-version.outputs.version }}"

  release:
    runs-on: ubuntu-latest
    name: Create Release
    needs: [ version-info, docs, pack-netstandard ]
    if: |
      github.ref == 'refs/heads/main' &&
      needs.version-info.outputs.new-version != needs.version-info.outputs.old-version

    steps:
      - uses: actions/checkout@v2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '5.0.x'

      - name: Download Docs
        uses: actions/download-artifact@v2
        with:
          name: Docs

      - name: Download NuGet package
        uses: actions/download-artifact@v2
        with:
          name: nupkg
      
      - name: Zip source code and docs
        run: |
          zip -r com.beatwaves.responsible.zip com.beatwaves.responsible
          zip -r ResponsibleDocs.zip ResponsibleDocs

      - uses: softprops/action-gh-release@91409e712cf565ce9eff10c87a8d1b11b81757ae
        with:
          fail_on_unmatched_files: true
          body: ${{ needs.version-info.outputs.changelog-body }}
          tag_name: ${{ needs.version-info.outputs.tag-name }}
          files: |
            ResponsibleDocs.zip
            com.beatwaves.responsible.zip
            Beatwaves.Responsible.*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish NuGet package
        run: dotnet nuget push Beatwaves.Responsible.*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_PUBLISH_KEY }}
